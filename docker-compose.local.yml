version: '3'

services:

  api:
    container_name: "${COMPOSE_PROJECT_NAME}_api"
    build:
      context: ./config/api
    working_dir: /var/www
    ports:
      - ${HOST_PORT_API}:9000
    volumes:
      - ${PATH_TO_API}:/var/www/
#      - ./config/api/conf.d/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
    environment:
      TZ: UTC

  nginx:
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    image: nginx:alpine
    ports:
      - ${HOST_PORT_NGINX}:80
    volumes:
      - ${PATH_TO_API}:/var/www/api
      - ./.docker/nginx/log:/var/log/nginx
      - ./config/nginx/api.conf:/etc/nginx/conf.d/default.conf
      - ./config/nginx/admin.conf:/etc/nginx/conf.d/admin.conf
    environment:
      TZ: UTC
    depends_on:
      - api
      - site-api

  admin:
    image: node:16
    volumes:
      - ${PATH_TO_ADMIN}:/srv/www
    ports:
      - ${HOST_PORT_ADMIN_WS}:9000 # для нормальной работы DEV-режима с обновлением через WS
    depends_on:
      - api
    working_dir: /srv/www
    command: bash -c "yarn dev"
    environment:
      TZ: UTC

  postgres:
    container_name: "${COMPOSE_PROJECT_NAME}_postgresdb"
    image: postgres:15.2
    restart: always
    ports:
      - "${HOST_PORT_POSTGRES}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./.docker/postgresql-data:/var/lib/postgresql/data

  redis:
    container_name: "${COMPOSE_PROJECT_NAME}_redisdb"
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${HOST_PORT_REDIS}:6379"
    volumes:
      - ./.docker/redis-data:/data

  supervisord:
    container_name: "${COMPOSE_PROJECT_NAME}_supervisord"
    build:
      context: ./config/supervisord
    volumes:
      - ${PATH_TO_API}:/var/www/
      - ./config/supervisord/conf.d:/etc/supervisord.d
    depends_on:
      - api

  site-api:
    build:
      context: .
      dockerfile: config/site-api/Dockerfile
    container_name: gelya_go_api_local
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: secret123
      DB_NAME: gelya_prodaet
      DB_SSLMODE: disable
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ./www/site-api:/app
    depends_on:
      - postgres
    restart: unless-stopped
    command: ["go", "run", "main.go"]
