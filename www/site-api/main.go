package main

import (
	"log"
	"site-api/config"
	"site-api/database"
	"site-api/handlers"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/joho/godotenv"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(); err != nil {
		log.Println("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := database.Connect(cfg); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := database.Migrate(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", err)
	}

	// –°–æ–∑–¥–∞–µ–º Fiber –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return c.Status(code).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})

	// Middleware
	app.Use(logger.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowMethods: "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders: "Origin,Content-Type,Accept,Authorization",
	}))

	// API –º–∞—Ä—à—Ä—É—Ç—ã
	api := app.Group("/api/v1")

	// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API)
	api.Get("/products", handlers.GetProducts)
	api.Get("/products/:id", handlers.GetProduct)

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–ø—Ü–∏–π (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API)
	api.Get("/options", handlers.GetOptions)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"status":  "ok",
			"message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç",
		})
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Server.Port)
	log.Fatal(app.Listen(":" + cfg.Server.Port))
}
